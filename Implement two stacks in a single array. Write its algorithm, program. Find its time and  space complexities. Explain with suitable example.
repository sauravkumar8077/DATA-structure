public class TwoStacksInOneArray {
    private int[] arr;
    private int top1, top2;

    public TwoStacksInOneArray(int size) {
        arr = new int[size];
        top1 = -1;  
        top2 = size; 
    }

    public void push1(int value) {
        if (top1 + 1 == top2) {
            System.out.println("Stack1 Overflow");
            return;
        }
        arr[++top1] = value;
    }

    public void push2(int value) {
        if (top1 + 1 == top2) {
            System.out.println("Stack2 Overflow");
            return;
        }
        arr[--top2] = value;
    }

    public int pop1() {
        if (top1 == -1) {
            System.out.println("Stack1 Underflow");
            return -1;
        }
        return arr[top1--];
    }

    public int pop2() {
        if (top2 == arr.length) {
            System.out.println("Stack2 Underflow");
            return -1;
        }
        return arr[top2++];
    }

    public int peek1() {
        if (top1 == -1) {
            System.out.println("Stack1 is empty");
            return -1;
        }
        return arr[top1];
    }

    public int peek2() {
        if (top2 == arr.length) {
            System.out.println("Stack2 is empty");
            return -1;
        }
        return arr[top2];
    }

    public boolean isEmpty1() {
        return top1 == -1;
    }

    public boolean isEmpty2() {
        return top2 == arr.length;
    }
    
    public static void main(String[] args) {
        TwoStacksInOneArray stacks = new TwoStacksInOneArray(10);

        stacks.push1(1);
        stacks.push1(2);
        stacks.push2(3);
        stacks.push2(4);

        System.out.println("Pop from Stack1: " + stacks.pop1());
        System.out.println("Pop from Stack2: " + stacks.pop2());

        System.out.println("Top of Stack1: " + stacks.peek1());
        System.out.println("Top of Stack2: " + stacks.peek2());
    }
}
// Time complexity=O(n)
// Space complexity=O(1
